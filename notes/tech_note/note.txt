list
tuple
string
num
None
boolean True False


dict
    key value

[（'alen',1111), ('tom','222'), ('cat','3333')]
格式：
{'key1':value1,  'key2':'value2',          ....   }
生成：
        空字典   {}
        带数据的字典： {'key':value,}
        dict(list)
        dict(**keywords)
引用字典数据：
    d['key']
修改：
    d['key'] = new value
删除;
    del d['key']    !=  del d
遍历：
    for  key  in dict:
        dict[key]
    items():   dict.items()  ---------> list  dict(list)--------- dict
    for key,value  in dict.items():
 访问dict：
    KeyError:异常处理
D.get(k[,d] )
keys()
values()
has_key()
update
copy()
...
id()
字典赋值操作： 修改同一个对象
函数调用


oop
1 对象
python ： 一切都是对象
独立存在的个体
2 类型（类）：
    类型 ---- 类
    对象 一定是某种类型的
    type()
    类型：---   该类型的实例-----对象
            方法（函数）:   行为
            属性（变量）：特征

3 内置的类：
4 自定义类
    定义：
    class Class_name(父类列表)： # 可以支持多重继承
        类体    
     class  Person(object):   #类名定义 首字符大写
           
    使用：实例化类 --- 对象
        p1 = Class_name()

    组成（类体中）
        成员方法（对象去调用）：
            第一个形参：self 对象本身  --- （this）

        成员属性：
            成员方法中 
                self.属性名
            初始化方法  __init__(self, .....)：
                类实例化对象，生成对象，对象自动调用 __init__()，参数的传递
                不要加return
                初始化成员属性
            def __init__(seff, .....)

       类属性：
            类对象的属性：
                位置：直接出现在类体中
                    class ClassName(object):
                        类属性 
                类对象可以调用，修改
                **实例对象是否可以调用：
                        可以，实例对象没有同名的属性
                        修改操作，创建了实例属性

        类方法：
            形式：
            @classmethod
            def fun_name(cls, ...  ):
        
        实例对象能否调用类方法
            类名.类方法()

       静态方法:
        @staticmethod
        def fun_name():

        使用：
            实例对象
            类对象
            类内：
                类名.静态方法()
  


  继承：
    代码复用：
    
    class 子类(父类):
    子类继承父类的一切。
    子类可以新建自己的属性，方法
    __init__(self)
        子类没有定义__init__(), 自动调用父类的__init__()方法。
 


Django
web 开源 框架
install
使用：
1 创建工程：
    django-admin.py startproject yw1

    cd yw1
    .
├── manage.py
└── yw1
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
2 运行开发server
 工程目录：python manage.py runserver 0.0.0.0:8000
3 创建应用
    python manage.py startapp blog
4 配置
    yw1/settings.py
        配置 DB
        添加 app
    yw1/urls.py
5 views中使用:
    如何使用  return HttpResponse()
    如何使用 return render(req, 模板文件， {数据})
