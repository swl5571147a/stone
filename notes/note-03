1.标准输入输出
	import sys       
	sys.stdin      系统标准输入
	sys.stdout.write("xxx")   系统标准输出
	sys.stderr.write("xxx")	  系统标准错误输出

2.重定向
	> :>     重定向，只输出标准输出
	&> 2>&1  重定向，&>将标准输出和错误输出都输出；2>&1将2（错误输出）重定向
			 到1（标准输出），所以输出的也是全部输出      
	1>&2 	 重定向，将1（标准输出）重定向到2（错误输出），所以输出的全是错误输出，
 			 输出将会打印在屏幕上，文件中将无信息
	:> 		 等价于将文件清空
	>/dev/null 2>&1   等于不打印任何信息
	eg: python xxx.py > log 2>&1   等价于  python xxx.py &> log  
								   等价于  python xxx.py >& log
	 	python xxx.py > log 1>&2   输出全在屏幕，文件中无信息
	注：为保持兼容，尽量使用python xxx.py > log 2>&1

3.print和stdout区别
	1)print调用write方法，一般是stdout
	2)print会自动进行格式转换
	3)print会自动添加换行符
	eg:print 123  ==  sys.stdout.write(str(123)+"\n")

4.print重定向
	格式：print >> filename,"xxxxx"     先将print重定向到filename,然后输出
                                        信息为"xxxxxx"
5.buffer
	使用sys.stdout.flush()来释放buffer,以便可以实时输出（如果不用该命令，则在执行
	的时候，可以使用-u参数来释放buffer
	eg:python -u xxx.py | cat -
	   如果在xxx.py里面写入sys.stdout.flush()则可以不加参数-u

6.字数统计
	import sys
	data = sys.stdin.read()        \\接受标准输入
	charts = len(data)              \\判断字符长度
	words = len(data.split())        \\split()会默认将按照空格/回车/Tab等切分
	lines = data.count("\n")          \\统计有多少个字符“\n",以便有多少行

	print "%(charts)s  %(words)s   %(lines)s" %locals()    \\locals()输出本页面
											变量字典，前面括号里面代表所表示的key

7.sys.argv
	作用：输出包括自己及所跟参数的列表，其中0表示自己，1表示所跟参数
	eg:
	import sys
	f = open(sys.argv[1]).read()
	words = len(f.split())
	lines = f.count("\n")
	print "words:%(words)s   lines:%(lines)s"%locals()

	执行：xxx.py filename     可以用来改写wc，制定stop  start



