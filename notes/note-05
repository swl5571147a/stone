1.hashlib使用
  对对象进行hash计算，用来比较二者的一致性
  import hashlib
  m = hashlib.md5()
  m.update(data)            可以一次加入，也可以多次更新
  m.update(data_2)
  m.digest()         返回十进制hash值，不容易看：\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9
  m.hexdigest()      返回十六进制hash值，常用，容易查看：c9352791f04dcbfea3d72f537960318a

  注意：在读取文件时，可以使用data = f.read(1024*4)，可以大大节省内存和CPU，提高运行速度
		使用time查看运行时间，如：time python re_hashlib.py，可以查看该命令执行时间
		使用free查看内存占用情况，加上-m可以查看以MB为单位的内存情况

2.函数递归调用
  def print_all_files(path):
  	isfile,isdir,join = os.path.isfile,os.path.isdir,os.paht.join
	lsdir = os.listdir(path)
	dirs = [i for i in lsdir if isdir(join(path,i))]
	files = [join(path,j) for j in lsdir if isfile(join(path,j))]
	for d in dirs:
		files += print_all_files(join(path,d))
	return files
	注意：在函数的递归调用时，都是在执行到此位置之前的内容，一直等最后一层调用结束并返回，才开始进行倒数第二层的调用。

	注意：使用find检查是否一致，用法：find ./ -type f | sort | md5sum   查看返回的md5值是否一致
		  find ./ -type f -exec {} \;


3.生成器
  
data = ''
for path,dirs,files in walk(sys.argv[1]):
	for f in files:
		fp = join(paht,f)
		msg = 'MD5 (%s) = '%fp+md5sum(fp)
		data+= msg




作业：
1.将获取目录大小的函数改写成生成器
2.获取目录下不同文件的行数并排序，要区分文件  .py .pl .html .text .c .cpp .h .php .pyc .sh
